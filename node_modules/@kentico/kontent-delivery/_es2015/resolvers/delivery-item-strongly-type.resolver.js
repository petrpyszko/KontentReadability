import { ContentItem, ContentItemSystemAttributes } from '../models';
var DeliveryItemStronglyTypeResolver = /** @class */ (function () {
    function DeliveryItemStronglyTypeResolver() {
    }
    DeliveryItemStronglyTypeResolver.prototype.createEmptyItemInstanceOfType = function (type, typeResolvers) {
        var resolver = this.getTypeResolver(type, typeResolvers);
        if (!resolver) {
            return this.createContentItem(undefined);
        }
        return this.createInstanceWithResolver(resolver, undefined);
    };
    /**
     * Creates item instance using either TypeResolver (if registered) or returns ContentItem
     */
    DeliveryItemStronglyTypeResolver.prototype.createItemInstance = function (data, typeResolvers, itemResolver) {
        var itemInstance;
        if (itemResolver) {
            itemInstance = itemResolver(data.item);
        }
        if (!itemInstance) {
            var typeResolver = this.getTypeResolver(data.item.system.type, typeResolvers);
            if (typeResolver) {
                // type resolver is registered, create new instance of given type
                itemInstance = this.createInstanceWithResolver(typeResolver, data);
            }
            else {
                // not type resolver is register for this type, use ContentItem
                itemInstance = this.createContentItem(data.item);
            }
        }
        if (!itemInstance) {
            throw Error("Item with codename '" + data.item.system.codename + "' could not be instantiated");
        }
        this.assignRequiredContentItemData(itemInstance, data.item);
        return itemInstance;
    };
    /**
     * Maps raw system response to strongly typed class
     * @param rawSystem Raw system response
     */
    DeliveryItemStronglyTypeResolver.prototype.mapSystemAttributes = function (rawSystem) {
        return new ContentItemSystemAttributes({
            name: rawSystem.name,
            codename: rawSystem.codename,
            id: rawSystem.id,
            lastModified: new Date(rawSystem.last_modified),
            language: rawSystem.language,
            type: rawSystem.type,
            sitemapLocations: rawSystem.sitemap_locations,
            collection: rawSystem.collection
        });
    };
    /**
     * Creates new instance of given type
     * @param resolver Type resolver
     * @param type Type of the content item
     */
    DeliveryItemStronglyTypeResolver.prototype.createInstanceWithResolver = function (resolver, data) {
        return resolver.resolve(data);
    };
    /**
     * Gets TypeResolver associated with given type (type = codename of Kentico Kontent content type)
     * @param type Kentico Kontent content type codename
     * @param resolvers Array of TypeResolver
     */
    DeliveryItemStronglyTypeResolver.prototype.getTypeResolver = function (type, resolvers) {
        return resolvers.find(function (m) { return m.type.toLowerCase() === type.toLowerCase(); });
    };
    /**
     * Creates base ContentItem when content type does not have a strongly typed model
     */
    DeliveryItemStronglyTypeResolver.prototype.createContentItem = function (item) {
        var contentItem = new ContentItem();
        if (item) {
            this.assignRequiredContentItemData(contentItem, item);
        }
        return contentItem;
    };
    /**
     * Maps default properties (system & elements)
     * @param item Mapped content item
     * @param rawItem Raw content item from response
     */
    DeliveryItemStronglyTypeResolver.prototype.assignRequiredContentItemData = function (item, rawItem) {
        item.system = this.mapSystemAttributes(rawItem.system);
        item._raw = rawItem;
    };
    return DeliveryItemStronglyTypeResolver;
}());
export { DeliveryItemStronglyTypeResolver };
export var stronglyTypedResolver = new DeliveryItemStronglyTypeResolver();
//# sourceMappingURL=delivery-item-strongly-type.resolver.js.map