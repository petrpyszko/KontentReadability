"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postCallback = exports.deleteCallback = exports.patchCallback = exports.putCallback = exports.getCallback = exports.registerRequestInterceptor = exports.registerResponseInterceptor = void 0;
var http_debugger_1 = require("./http.debugger");
function registerResponseInterceptor(instance, interceptor) {
    instance.interceptors.response.use(function (response) {
        return interceptor(response);
    }, function (error) {
        return Promise.reject(error);
    });
}
exports.registerResponseInterceptor = registerResponseInterceptor;
function registerRequestInterceptor(instance, interceptor) {
    // Add a request interceptor
    instance.interceptors.request.use(function (config) {
        return interceptor(config);
    }, function (error) {
        return Promise.reject(error);
    });
}
exports.registerRequestInterceptor = registerRequestInterceptor;
function getCallback(instance, call, options) {
    http_debugger_1.httpDebugger.debugStartHttpRequest();
    var axiosPromise = instance.get(call.url, {
        headers: getHeadersJson(options && options.headers ? options.headers : [], false),
        responseType: options && options.responseType ? options.responseType : undefined
    });
    return mapRequestResult(axiosPromise);
}
exports.getCallback = getCallback;
function putCallback(instance, call, options) {
    http_debugger_1.httpDebugger.debugStartHttpRequest();
    var axiosPromise = instance.put(call.url, call.body, {
        headers: getHeadersJson(options && options.headers ? options.headers : [], true),
        responseType: options && options.responseType ? options.responseType : undefined
    });
    return mapRequestResult(axiosPromise);
}
exports.putCallback = putCallback;
function patchCallback(instance, call, options) {
    http_debugger_1.httpDebugger.debugStartHttpRequest();
    var axiosPromise = instance.patch(call.url, call.body, {
        headers: getHeadersJson(options && options.headers ? options.headers : [], true),
        responseType: options && options.responseType ? options.responseType : undefined
    });
    return mapRequestResult(axiosPromise);
}
exports.patchCallback = patchCallback;
function deleteCallback(instance, call, options) {
    http_debugger_1.httpDebugger.debugStartHttpRequest();
    var axiosPromise = instance.delete(call.url, {
        headers: getHeadersJson(options && options.headers ? options.headers : [], true),
        responseType: options && options.responseType ? options.responseType : undefined
    });
    return mapRequestResult(axiosPromise);
}
exports.deleteCallback = deleteCallback;
function postCallback(instance, call, options) {
    http_debugger_1.httpDebugger.debugStartHttpRequest();
    var axiosPromise = instance.post(call.url, call.body, {
        headers: getHeadersJson(options && options.headers ? options.headers : [], true),
        responseType: options && options.responseType ? options.responseType : undefined
    });
    return mapRequestResult(axiosPromise);
}
exports.postCallback = postCallback;
function getHeadersJson(headers, addContentTypeHeader) {
    var headerJson = {};
    headers.forEach(function (header) {
        headerJson[header.header] = header.value;
    });
    if (addContentTypeHeader) {
        // add default content type header if not present
        var contentTypeHeader = headers.find(function (m) { return m.header.toLowerCase() === 'Content-Type'.toLowerCase(); });
        if (!contentTypeHeader) {
            headerJson['Content-Type'] = 'application/json';
        }
    }
    return headerJson;
}
function mapRequestResult(promise) {
    return promise.then(function (response) {
        http_debugger_1.httpDebugger.debugResolveHttpRequest();
        return {
            response: response
        };
    }, function (error) {
        http_debugger_1.httpDebugger.debugFailedHttpRequest();
        return {
            error: error
        };
    });
}
//# sourceMappingURL=http.functions.js.map