"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.enumHelper = exports.EnumHelper = void 0;
var EnumHelper = /** @class */ (function () {
    function EnumHelper() {
    }
    EnumHelper.prototype.getAllNames = function (T) {
        var enumNames = [];
        for (var key in T) {
            if (T.hasOwnProperty(key)) {
                enumNames.push(key);
            }
        }
        return enumNames;
    };
    EnumHelper.prototype.getAllValues = function (T) {
        var allEnumValues = Object.keys(T).map(function (key) { return T[key]; });
        return allEnumValues;
    };
    EnumHelper.prototype.getEnumFromValue = function (T, value) {
        try {
            if (!value) {
                return undefined;
            }
            // we can map back from index number directly
            if (this.isNumeric(value)) {
                return T[value];
            }
            // for strings, we need to compare each value separately
            var allEnumValues = this.getAllValues(T);
            var result = allEnumValues.find(function (m) { return m.toLowerCase() === value.toString().toLowerCase(); });
            if (!result) {
                return undefined;
            }
            return result;
        }
        catch (err) {
            return undefined;
        }
    };
    EnumHelper.prototype.getEnumFromName = function (T, name) {
        var allNames = this.getAllNames(T);
        for (var _i = 0, allNames_1 = allNames; _i < allNames_1.length; _i++) {
            var enumName = allNames_1[_i];
            if (enumName.toLowerCase() === name.toLowerCase()) {
                return T[enumName];
            }
        }
        return undefined;
    };
    EnumHelper.prototype.isNumeric = function (value) {
        return !isNaN(parseFloat(value)) && isFinite(value);
    };
    return EnumHelper;
}());
exports.EnumHelper = EnumHelper;
exports.enumHelper = new EnumHelper();
//# sourceMappingURL=enum.helper.js.map