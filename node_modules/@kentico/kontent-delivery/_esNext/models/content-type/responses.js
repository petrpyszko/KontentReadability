var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { BaseKontentResponseStandardDebug } from '../common';
export var TypeResponses;
(function (TypeResponses) {
    var ListContentTypesResponse = /** @class */ (function (_super) {
        __extends(ListContentTypesResponse, _super);
        /**
         * Response containing multiple types
         * @constructor
         * @param {IContentType[]} types - Content types
         * @param {Pagination} pagination - Pagination object
         */
        function ListContentTypesResponse(types, pagination, response, isDeveloperMode) {
            var _this = _super.call(this, response, isDeveloperMode) || this;
            _this.types = types;
            _this.pagination = pagination;
            return _this;
        }
        return ListContentTypesResponse;
    }(BaseKontentResponseStandardDebug));
    TypeResponses.ListContentTypesResponse = ListContentTypesResponse;
    var ViewContentTypeResponse = /** @class */ (function (_super) {
        __extends(ViewContentTypeResponse, _super);
        /**
         * Response containing single type
         * @constructor
         * @param {IContentType} type - Content type
         */
        function ViewContentTypeResponse(type, response, isDeveloperMode) {
            var _this = _super.call(this, response, isDeveloperMode) || this;
            _this.type = type;
            return _this;
        }
        return ViewContentTypeResponse;
    }(BaseKontentResponseStandardDebug));
    TypeResponses.ViewContentTypeResponse = ViewContentTypeResponse;
})(TypeResponses || (TypeResponses = {}));
//# sourceMappingURL=responses.js.map