import { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { IBaseResponse, IHttpDeleteQueryCall, IHttpGetQueryCall, IHttpPatchQueryCall, IHttpPostQueryCall, IHttpPutQueryCall, IHttpQueryOptions } from './http.models';
import { IHttpService } from './ihttp.service';
export declare class HttpService implements IHttpService {
    private readonly axiosInstance;
    constructor(opts?: {
        requestInterceptor?: (config: AxiosRequestConfig) => AxiosRequestConfig;
        responseInterceptor?: (config: AxiosResponse<any>) => AxiosResponse<any>;
        axiosRequestConfig?: AxiosRequestConfig;
    });
    get<TRawData extends any>(call: IHttpGetQueryCall, options?: IHttpQueryOptions): Observable<IBaseResponse<TRawData>>;
    post<TRawData extends any>(call: IHttpPostQueryCall, options?: IHttpQueryOptions): Observable<IBaseResponse<TRawData>>;
    put<TRawData extends any>(call: IHttpPutQueryCall, options?: IHttpQueryOptions): Observable<IBaseResponse<TRawData>>;
    patch<TRawData extends any>(call: IHttpPatchQueryCall, options?: IHttpQueryOptions): Observable<IBaseResponse<TRawData>>;
    delete<TRawData extends any>(call: IHttpDeleteQueryCall, options?: IHttpQueryOptions): Observable<IBaseResponse<TRawData>>;
    private mapAxiosObservable;
    private mapResult;
}
