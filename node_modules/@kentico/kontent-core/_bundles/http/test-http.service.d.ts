import { Observable } from 'rxjs';
import { IBaseResponse, IHeader, IHttpDeleteQueryCall, IHttpGetQueryCall, IHttpPatchQueryCall, IHttpPostQueryCall, IHttpPutQueryCall, IHttpQueryOptions } from './http.models';
import { IHttpService } from './ihttp.service';
export declare class TestHttpService implements IHttpService {
    throwError: boolean;
    fakeResponseJson: any;
    errorJson: any;
    fakeHeaders: IHeader[];
    fakeStatusCode: number;
    isAxiosError?: boolean;
    constructor(config: {
        fakeStatusCode?: number;
        fakeResponseJson?: any;
        throwError?: boolean;
        isAxiosError?: boolean;
        errorJson?: any;
        fakeHeaders?: IHeader[];
    });
    get<TRawData extends any>(call: IHttpGetQueryCall, options?: IHttpQueryOptions): Observable<IBaseResponse<TRawData>>;
    post<TRawData extends any>(call: IHttpPostQueryCall, options?: IHttpQueryOptions): Observable<IBaseResponse<TRawData>>;
    put<TRawData extends any>(call: IHttpPutQueryCall, options?: IHttpQueryOptions): Observable<IBaseResponse<TRawData>>;
    patch<TRawData extends any>(call: IHttpPatchQueryCall, options?: IHttpQueryOptions): Observable<IBaseResponse<TRawData>>;
    delete<TRawData extends any>(call: IHttpDeleteQueryCall, options?: IHttpQueryOptions): Observable<IBaseResponse<TRawData>>;
}
