"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguagesQuery = void 0;
var models_1 = require("../../models");
var base_language_query_class_1 = require("./base-language-query.class");
var LanguagesQuery = /** @class */ (function (_super) {
    __extends(LanguagesQuery, _super);
    function LanguagesQuery(config, queryService) {
        var _this = _super.call(this, config, queryService) || this;
        _this.config = config;
        _this.queryService = queryService;
        return _this;
    }
    /**
     * Limits the number of taxonomies returned by query
     * @param limit Number of taxonomies to load
     */
    LanguagesQuery.prototype.limitParameter = function (limit) {
        this.parameters.push(new models_1.Parameters.LimitParameter(limit));
        return this;
    };
    /**
     * Skips the selected number of taxonomies
     * @param skip Number of taxonomies to skip
     */
    LanguagesQuery.prototype.skipParameter = function (skip) {
        this.parameters.push(new models_1.Parameters.SkipParameter(skip));
        return this;
    };
    /**
     * Gets the Observable
     */
    LanguagesQuery.prototype.toObservable = function () {
        return _super.prototype.runLanguagesQuery.call(this);
    };
    /**
     * Gets 'Url' representation of query
     */
    LanguagesQuery.prototype.getUrl = function () {
        return _super.prototype.getLanguagesQueryUrl.call(this);
    };
    return LanguagesQuery;
}(base_language_query_class_1.BaseLanguageQuery));
exports.LanguagesQuery = LanguagesQuery;
//# sourceMappingURL=languages-query.class.js.map