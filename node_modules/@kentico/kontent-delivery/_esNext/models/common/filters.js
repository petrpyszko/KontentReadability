export var Filters;
(function (Filters) {
    var valueSeparator = ',';
    var defaultValue = '';
    var getParamValueForSystemFilter = function (param) {
        if (!param) {
            return defaultValue;
        }
        if (Array.isArray(param)) {
            var value = '';
            // use [in] filter
            for (var i = 0; i < param.length; i++) {
                value = value + param[i].toString();
                if (i !== param.length - 1) {
                    // append separator if its not last item
                    value = value + valueSeparator;
                }
            }
            return value;
        }
        // single param was given
        return param.toString();
    };
    var TypeFilter = /** @class */ (function () {
        function TypeFilter(type) {
            this.type = type;
        }
        TypeFilter.prototype.getParam = function () {
            if (Array.isArray(this.type)) {
                // multiple types
                return "system.type[in]=" + getParamValueForSystemFilter(this.type);
            }
            // single type
            return "system.type=" + getParamValueForSystemFilter(this.type);
        };
        return TypeFilter;
    }());
    Filters.TypeFilter = TypeFilter;
    var CollectionFilter = /** @class */ (function () {
        function CollectionFilter(collection) {
            this.collection = collection;
        }
        CollectionFilter.prototype.getParam = function () {
            if (Array.isArray(this.collection)) {
                // multiple collections
                return "system.collection[in]=" + getParamValueForSystemFilter(this.collection);
            }
            // single collection
            return "system.collection=" + getParamValueForSystemFilter(this.collection);
        };
        return CollectionFilter;
    }());
    Filters.CollectionFilter = CollectionFilter;
    var EmptyFilter = /** @class */ (function () {
        function EmptyFilter(element) {
            this.element = element;
            if (!this.element) {
                throw Error("Element specified in 'EmptyFilter' is undefined ");
            }
        }
        EmptyFilter.prototype.getParam = function () {
            return this.element.trim() + "[empty]";
        };
        return EmptyFilter;
    }());
    Filters.EmptyFilter = EmptyFilter;
    var NotEmptyFilter = /** @class */ (function () {
        function NotEmptyFilter(element) {
            this.element = element;
            if (!this.element) {
                throw Error("Element specified in 'NotEmptyFilter' is undefined ");
            }
        }
        NotEmptyFilter.prototype.getParam = function () {
            return this.element.trim() + "[nempty]";
        };
        return NotEmptyFilter;
    }());
    Filters.NotEmptyFilter = NotEmptyFilter;
    var EqualsFilter = /** @class */ (function () {
        function EqualsFilter(element, value) {
            this.element = element;
            this.value = value;
            if (!this.element) {
                throw Error("Element specified in 'EqualsFilter' is undefined ");
            }
        }
        EqualsFilter.prototype.getParam = function () {
            return this.element.trim() + "[eq]=" + this.getParamValue();
        };
        EqualsFilter.prototype.getParamValue = function () {
            if (!this.value) {
                return defaultValue;
            }
            return this.value;
        };
        return EqualsFilter;
    }());
    Filters.EqualsFilter = EqualsFilter;
    var NotEqualsFilter = /** @class */ (function () {
        function NotEqualsFilter(element, value) {
            this.element = element;
            this.value = value;
            if (!this.element) {
                throw Error("Element specified in 'NotEqualsFilter' is undefined ");
            }
        }
        NotEqualsFilter.prototype.getParam = function () {
            return this.element.trim() + "[neq]=" + this.getParamValue();
        };
        NotEqualsFilter.prototype.getParamValue = function () {
            if (!this.value) {
                return defaultValue;
            }
            return this.value;
        };
        return NotEqualsFilter;
    }());
    Filters.NotEqualsFilter = NotEqualsFilter;
    var AllFilter = /** @class */ (function () {
        function AllFilter(element, values) {
            this.element = element;
            this.values = values;
            if (!this.element) {
                throw Error("Element specified in 'AllFilter' is undefined ");
            }
        }
        AllFilter.prototype.getParam = function () {
            return this.element.trim() + "[all]=" + this.getParamValue();
        };
        AllFilter.prototype.getParamValue = function () {
            if (!this.values || !Array.isArray(this.values)) {
                return defaultValue;
            }
            return this.values.map(function (m) { return m.trim(); }).join(',');
        };
        return AllFilter;
    }());
    Filters.AllFilter = AllFilter;
    var AnyFilter = /** @class */ (function () {
        function AnyFilter(element, values) {
            this.element = element;
            this.values = values;
            if (!this.element) {
                throw Error("Element specified in 'AnyFilter' is undefined ");
            }
        }
        AnyFilter.prototype.getParam = function () {
            return this.element.trim() + "[any]=" + this.getParamValue();
        };
        AnyFilter.prototype.getParamValue = function () {
            if (!this.values || !Array.isArray(this.values)) {
                return defaultValue;
            }
            return this.values.map(function (m) { return m.trim(); }).join(',');
        };
        return AnyFilter;
    }());
    Filters.AnyFilter = AnyFilter;
    var ContainsFilter = /** @class */ (function () {
        function ContainsFilter(element, values) {
            this.element = element;
            this.values = values;
            if (!this.element) {
                throw Error("Element specified in 'ContainsFilter' is undefined ");
            }
        }
        ContainsFilter.prototype.getParam = function () {
            return this.element.trim() + "[contains]=" + this.getParamValue();
        };
        ContainsFilter.prototype.getParamValue = function () {
            if (!this.values || !Array.isArray(this.values)) {
                return defaultValue;
            }
            return this.values.map(function (m) { return m.trim(); }).join(',');
        };
        return ContainsFilter;
    }());
    Filters.ContainsFilter = ContainsFilter;
    var GreaterThanFilter = /** @class */ (function () {
        function GreaterThanFilter(element, value) {
            this.element = element;
            this.value = value;
            if (!this.element) {
                throw Error("Element specified in 'GreaterThanFilter' is undefined ");
            }
        }
        GreaterThanFilter.prototype.getParam = function () {
            return this.element.trim() + "[gt]=" + this.getParamValue();
        };
        GreaterThanFilter.prototype.getParamValue = function () {
            if (!this.value) {
                return defaultValue;
            }
            return this.value;
        };
        return GreaterThanFilter;
    }());
    Filters.GreaterThanFilter = GreaterThanFilter;
    var GreaterThanOrEqualFilter = /** @class */ (function () {
        function GreaterThanOrEqualFilter(element, value) {
            this.element = element;
            this.value = value;
            if (!this.element) {
                throw Error("Element specified in 'GreaterThanOrEqualFilter' is undefined ");
            }
        }
        GreaterThanOrEqualFilter.prototype.getParam = function () {
            return this.element.trim() + "[gte]=" + this.getParamValue();
        };
        GreaterThanOrEqualFilter.prototype.getParamValue = function () {
            if (!this.value) {
                return defaultValue;
            }
            return this.value;
        };
        return GreaterThanOrEqualFilter;
    }());
    Filters.GreaterThanOrEqualFilter = GreaterThanOrEqualFilter;
    var InFilter = /** @class */ (function () {
        function InFilter(element, values) {
            this.element = element;
            this.values = values;
            if (!this.element) {
                throw Error("Element specified in 'Infilter' is undefined");
            }
        }
        InFilter.prototype.getParam = function () {
            return this.element.trim() + "[in]=" + this.getParamValue();
        };
        InFilter.prototype.getParamValue = function () {
            if (!this.values || !Array.isArray(this.values)) {
                return defaultValue;
            }
            return this.values.map(function (m) {
                return m.trim();
            }).join(',');
        };
        return InFilter;
    }());
    Filters.InFilter = InFilter;
    var NotInFilter = /** @class */ (function () {
        function NotInFilter(element, values) {
            this.element = element;
            this.values = values;
            if (!this.element) {
                throw Error("Element specified in 'NotInFilter' is undefined");
            }
        }
        NotInFilter.prototype.getParam = function () {
            return this.element.trim() + "[nin]=" + this.getParamValue();
        };
        NotInFilter.prototype.getParamValue = function () {
            if (!this.values || !Array.isArray(this.values)) {
                return defaultValue;
            }
            return this.values.map(function (m) {
                return m.trim();
            }).join(',');
        };
        return NotInFilter;
    }());
    Filters.NotInFilter = NotInFilter;
    var LessThanFilter = /** @class */ (function () {
        function LessThanFilter(element, value) {
            this.element = element;
            this.value = value;
            if (!this.element) {
                throw Error("Element specified in 'LessThanFilter' is undefined ");
            }
        }
        LessThanFilter.prototype.getParam = function () {
            return this.element.trim() + "[lt]=" + this.getParamValue();
        };
        LessThanFilter.prototype.getParamValue = function () {
            if (!this.value) {
                return defaultValue;
            }
            return this.value;
        };
        return LessThanFilter;
    }());
    Filters.LessThanFilter = LessThanFilter;
    var LessThanOrEqualFilter = /** @class */ (function () {
        function LessThanOrEqualFilter(element, value) {
            this.element = element;
            this.value = value;
            if (!this.element) {
                throw Error("Element specified in 'LessThanOrEqualFilter' is undefined ");
            }
        }
        LessThanOrEqualFilter.prototype.getParam = function () {
            return this.element.trim() + "[lte]=" + this.getParamValue();
        };
        LessThanOrEqualFilter.prototype.getParamValue = function () {
            if (!this.value) {
                return defaultValue;
            }
            return this.value;
        };
        return LessThanOrEqualFilter;
    }());
    Filters.LessThanOrEqualFilter = LessThanOrEqualFilter;
    var RangeFilter = /** @class */ (function () {
        function RangeFilter(element, lowerValue, higherValue) {
            this.element = element;
            this.lowerValue = lowerValue;
            this.higherValue = higherValue;
            if (!this.element) {
                throw Error("Element specified in 'RangeFilter' is undefined ");
            }
            if (lowerValue > higherValue) {
                throw Error("'lowerValue' cannot be higher then 'higherValue' in 'RangeFilter'");
            }
        }
        RangeFilter.prototype.getParam = function () {
            return this.element.trim() + "[range]=" + this.getParamValue();
        };
        RangeFilter.prototype.getParamValue = function () {
            var lowerVal = defaultValue;
            var higherVal = defaultValue;
            if (this.lowerValue) {
                lowerVal = this.lowerValue.toString();
            }
            if (this.higherValue) {
                higherVal = this.higherValue.toString();
            }
            return lowerVal + "," + higherVal;
        };
        return RangeFilter;
    }());
    Filters.RangeFilter = RangeFilter;
})(Filters || (Filters = {}));
//# sourceMappingURL=filters.js.map