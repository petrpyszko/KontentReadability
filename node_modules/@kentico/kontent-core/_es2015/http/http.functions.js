import { httpDebugger } from './http.debugger';
export function registerResponseInterceptor(instance, interceptor) {
    instance.interceptors.response.use(function (response) {
        return interceptor(response);
    }, function (error) {
        return Promise.reject(error);
    });
}
export function registerRequestInterceptor(instance, interceptor) {
    // Add a request interceptor
    instance.interceptors.request.use(function (config) {
        return interceptor(config);
    }, function (error) {
        return Promise.reject(error);
    });
}
export function getCallback(instance, call, options) {
    httpDebugger.debugStartHttpRequest();
    var axiosPromise = instance.get(call.url, {
        headers: getHeadersJson(options && options.headers ? options.headers : [], false),
        responseType: options && options.responseType ? options.responseType : undefined
    });
    return mapRequestResult(axiosPromise);
}
export function putCallback(instance, call, options) {
    httpDebugger.debugStartHttpRequest();
    var axiosPromise = instance.put(call.url, call.body, {
        headers: getHeadersJson(options && options.headers ? options.headers : [], true),
        responseType: options && options.responseType ? options.responseType : undefined
    });
    return mapRequestResult(axiosPromise);
}
export function patchCallback(instance, call, options) {
    httpDebugger.debugStartHttpRequest();
    var axiosPromise = instance.patch(call.url, call.body, {
        headers: getHeadersJson(options && options.headers ? options.headers : [], true),
        responseType: options && options.responseType ? options.responseType : undefined
    });
    return mapRequestResult(axiosPromise);
}
export function deleteCallback(instance, call, options) {
    httpDebugger.debugStartHttpRequest();
    var axiosPromise = instance.delete(call.url, {
        headers: getHeadersJson(options && options.headers ? options.headers : [], true),
        responseType: options && options.responseType ? options.responseType : undefined
    });
    return mapRequestResult(axiosPromise);
}
export function postCallback(instance, call, options) {
    httpDebugger.debugStartHttpRequest();
    var axiosPromise = instance.post(call.url, call.body, {
        headers: getHeadersJson(options && options.headers ? options.headers : [], true),
        responseType: options && options.responseType ? options.responseType : undefined
    });
    return mapRequestResult(axiosPromise);
}
function getHeadersJson(headers, addContentTypeHeader) {
    var headerJson = {};
    headers.forEach(function (header) {
        headerJson[header.header] = header.value;
    });
    if (addContentTypeHeader) {
        // add default content type header if not present
        var contentTypeHeader = headers.find(function (m) { return m.header.toLowerCase() === 'Content-Type'.toLowerCase(); });
        if (!contentTypeHeader) {
            headerJson['Content-Type'] = 'application/json';
        }
    }
    return headerJson;
}
function mapRequestResult(promise) {
    return promise.then(function (response) {
        httpDebugger.debugResolveHttpRequest();
        return {
            response: response
        };
    }, function (error) {
        httpDebugger.debugFailedHttpRequest();
        return {
            error: error
        };
    });
}
//# sourceMappingURL=http.functions.js.map