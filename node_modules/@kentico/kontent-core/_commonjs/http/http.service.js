"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpService = void 0;
var axios_1 = require("axios");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var headers_helper_1 = require("./headers-helper");
var HttpFunctions = require("./http.functions");
var observable_retry_strategy_1 = require("./observable-retry-strategy");
var retry_service_1 = require("./retry-service");
var HttpService = /** @class */ (function () {
    function HttpService(opts) {
        this.axiosInstance = axios_1.default.create(opts && opts.axiosRequestConfig ? opts.axiosRequestConfig : undefined);
        if (opts) {
            if (opts.requestInterceptor) {
                HttpFunctions.registerRequestInterceptor(this.axiosInstance, opts.requestInterceptor);
            }
            if (opts.responseInterceptor) {
                HttpFunctions.registerResponseInterceptor(this.axiosInstance, opts.responseInterceptor);
            }
        }
    }
    HttpService.prototype.get = function (call, options) {
        var _this = this;
        // bind callback from axios promise
        var axiosObservable = rxjs_1.defer(function () { return rxjs_1.from(HttpFunctions.getCallback(_this.axiosInstance, call, options)); });
        // map axios observable
        return this.mapAxiosObservable(axiosObservable, options);
    };
    HttpService.prototype.post = function (call, options) {
        var _this = this;
        // bind callback from axios promise
        var axiosObservable = rxjs_1.defer(function () { return rxjs_1.from(HttpFunctions.postCallback(_this.axiosInstance, call, options)); });
        // map axios observable
        return this.mapAxiosObservable(axiosObservable, options);
    };
    HttpService.prototype.put = function (call, options) {
        var _this = this;
        // bind callback from axios promise
        var axiosObservable = rxjs_1.defer(function () { return rxjs_1.from(HttpFunctions.putCallback(_this.axiosInstance, call, options)); });
        // map axios observable
        return this.mapAxiosObservable(axiosObservable, options);
    };
    HttpService.prototype.patch = function (call, options) {
        var _this = this;
        // bind callback from axios promise
        var axiosObservable = rxjs_1.defer(function () { return rxjs_1.from(HttpFunctions.patchCallback(_this.axiosInstance, call, options)); });
        // map axios observable
        return this.mapAxiosObservable(axiosObservable, options);
    };
    HttpService.prototype.delete = function (call, options) {
        var _this = this;
        // bind callback from axios promise
        var axiosObservable = rxjs_1.defer(function () { return rxjs_1.from(HttpFunctions.deleteCallback(_this.axiosInstance, call, options)); });
        // map axios observable
        return this.mapAxiosObservable(axiosObservable, options);
    };
    HttpService.prototype.mapAxiosObservable = function (axiosObservable, options) {
        var _this = this;
        return axiosObservable.pipe(operators_1.map(function (result) { return _this.mapResult(result); }), operators_1.retryWhen(observable_retry_strategy_1.observableRetryStrategy.strategy(retry_service_1.retryService.getRetryStrategyFromStrategyOptions(options === null || options === void 0 ? void 0 : options.retryStrategy), {
            startTime: new Date()
        })), operators_1.catchError(function (error) {
            // Handling errors: https://github.com/axios/axios#handling-errors
            if (options && options.logErrorToConsole) {
                console.error("Kentico Kontent Core SDK encountered an error: ", error);
            }
            return rxjs_1.throwError(error);
        }));
    };
    HttpService.prototype.mapResult = function (result) {
        // if error is set, throw it
        if (result.error) {
            throw result.error;
        }
        // if neither error nor response is set, throw an error
        if (!result.response) {
            throw Error('Response is not set and no error was thrown');
        }
        return {
            data: result.response.data,
            response: result.response,
            headers: headers_helper_1.extractHeadersFromAxiosResponse(result.response),
            status: result.response.status
        };
    };
    return HttpService;
}());
exports.HttpService = HttpService;
//# sourceMappingURL=http.service.js.map