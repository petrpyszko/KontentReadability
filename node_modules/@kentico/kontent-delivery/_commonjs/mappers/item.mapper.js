"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemMapper = void 0;
var resolvers_1 = require("../resolvers");
var element_mapper_1 = require("./element.mapper");
var ItemMapper = /** @class */ (function () {
    function ItemMapper(config, richTextHtmlParser) {
        this.config = config;
        this.richTextHtmlParser = richTextHtmlParser;
        this.elementMapper = new element_mapper_1.ElementMapper(config, richTextHtmlParser);
    }
    /**
     * Maps single item to its proper strongly typed model from the given Kontent response
     * @param response Kontent response used to map the item
     * @param queryConfig Query configuration
     */
    ItemMapper.prototype.mapSingleItemFromResponse = function (response, queryConfig) {
        var mapResult = this.mapItems({
            mainItems: [response.item],
            linkedItems: Object.values(response.modular_content),
            queryConfig: queryConfig
        });
        return {
            item: mapResult.items[0],
            linkedItems: mapResult.linkedItems
        };
    };
    /**
     * Maps multiple items to their strongly typed model from the given Kontent response
     * @param response Kontent response used to map the item
     * @param queryConfig Query configuration
     */
    ItemMapper.prototype.mapMultipleItemsFromResponse = function (response, queryConfig) {
        var mapResult = this.mapItems({
            mainItems: response.items,
            linkedItems: Object.values(response.modular_content),
            queryConfig: queryConfig
        });
        return mapResult;
    };
    /**
     * Maps item contracts to full models
     */
    ItemMapper.prototype.mapItems = function (data) {
        var that = this;
        var itemResolver = data.queryConfig && data.queryConfig.itemResolver ? data.queryConfig.itemResolver : undefined;
        var processedItems = {};
        var preparedItems = {};
        var processingStartedForCodenames = [];
        var mappedMainItems = [];
        var mappedLinkedItems = {};
        var itemsToResolve = __spreadArrays(data.mainItems, data.linkedItems);
        // first prepare reference for all items
        for (var _i = 0, itemsToResolve_1 = itemsToResolve; _i < itemsToResolve_1.length; _i++) {
            var item = itemsToResolve_1[_i];
            preparedItems[item.system.codename] = resolvers_1.stronglyTypedResolver.createItemInstance({
                item: item
            }, this.config.typeResolvers || [], itemResolver);
        }
        // then resolve items
        for (var _a = 0, _b = data.mainItems; _a < _b.length; _a++) {
            var item = _b[_a];
            var itemResult = that.mapItem({
                item: item,
                processedItems: processedItems,
                queryConfig: data.queryConfig,
                preparedItems: preparedItems,
                processingStartedForCodenames: processingStartedForCodenames
            });
            mappedMainItems.push(itemResult.item);
        }
        for (var _c = 0, _d = data.linkedItems; _c < _d.length; _c++) {
            var item = _d[_c];
            var itemResult = that.mapItem({
                item: item,
                processedItems: processedItems,
                queryConfig: data.queryConfig,
                preparedItems: preparedItems,
                processingStartedForCodenames: processingStartedForCodenames
            });
            mappedLinkedItems[item.system.codename] = itemResult.item;
        }
        return {
            items: mappedMainItems,
            linkedItems: mappedLinkedItems
        };
    };
    /**
     * Maps item contract to full model
     */
    ItemMapper.prototype.mapItem = function (data) {
        if (!data.item) {
            throw Error("Could not map item because its undefined");
        }
        var result = this.elementMapper.mapElements({
            item: data.item,
            preparedItems: data.preparedItems,
            processingStartedForCodenames: [],
            processedItems: data.processedItems,
            queryConfig: data.queryConfig
        });
        if (!result) {
            throw Error("Mapping of content item '" + data.item.system.codename + "' failed");
        }
        return {
            item: result.item,
            processedItems: result.processedItems,
            preparedItems: result.preparedItems,
            processingStartedForCodenames: result.processingStartedForCodenames
        };
    };
    return ItemMapper;
}());
exports.ItemMapper = ItemMapper;
//# sourceMappingURL=item.mapper.js.map