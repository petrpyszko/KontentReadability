"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestHttpService = void 0;
var rxjs_1 = require("rxjs");
var TestHttpService = /** @class */ (function () {
    function TestHttpService(config) {
        this.throwError = false;
        this.fakeResponseJson = undefined;
        this.errorJson = undefined;
        this.fakeHeaders = [];
        this.fakeStatusCode = 200;
        this.isAxiosError = false;
        Object.assign(this, config);
    }
    TestHttpService.prototype.get = function (call, options) {
        // throw kontent error
        if (this.throwError) {
            var fakeError = {
                isAxiosError: this.isAxiosError,
                response: {
                    data: this.errorJson
                }
            };
            return rxjs_1.throwError({
                error: fakeError,
                headers: this.fakeHeaders,
                status: this.fakeStatusCode
            });
        }
        // return fake response
        return rxjs_1.of({
            data: this.fakeResponseJson,
            response: undefined,
            headers: this.fakeHeaders,
            status: this.fakeStatusCode
        });
    };
    TestHttpService.prototype.post = function (call, options) {
        // throw kontent error
        if (this.throwError) {
            var fakeError = {
                isAxiosError: this.isAxiosError,
                response: {
                    data: this.errorJson
                }
            };
            return rxjs_1.throwError({
                error: fakeError,
                headers: this.fakeHeaders,
                status: this.fakeStatusCode
            });
        }
        // return fake response
        return rxjs_1.of({
            data: this.fakeResponseJson,
            response: undefined,
            headers: this.fakeHeaders,
            status: this.fakeStatusCode
        });
    };
    TestHttpService.prototype.put = function (call, options) {
        // throw kontent error
        if (this.throwError) {
            var fakeError = {
                isAxiosError: this.isAxiosError,
                response: {
                    data: this.errorJson
                }
            };
            return rxjs_1.throwError({
                error: fakeError,
                headers: this.fakeHeaders,
                status: this.fakeStatusCode
            });
        }
        // return fake response
        return rxjs_1.of({
            data: this.fakeResponseJson,
            response: undefined,
            headers: this.fakeHeaders,
            status: this.fakeStatusCode
        });
    };
    TestHttpService.prototype.patch = function (call, options) {
        // throw kontent error
        if (this.throwError) {
            var fakeError = {
                isAxiosError: this.isAxiosError,
                response: {
                    data: this.errorJson
                }
            };
            return rxjs_1.throwError({
                error: fakeError,
                headers: this.fakeHeaders,
                status: this.fakeStatusCode
            });
        }
        // return fake response
        return rxjs_1.of({
            data: this.fakeResponseJson,
            response: undefined,
            headers: [],
            status: this.fakeStatusCode
        });
    };
    TestHttpService.prototype.delete = function (call, options) {
        // throw kontent error
        if (this.throwError) {
            var fakeError = {
                isAxiosError: this.isAxiosError,
                response: {
                    data: this.errorJson
                }
            };
            return rxjs_1.throwError({
                error: fakeError,
                headers: this.fakeHeaders,
                status: this.fakeStatusCode
            });
        }
        // return fake response
        return rxjs_1.of({
            data: this.fakeResponseJson,
            response: undefined,
            headers: this.fakeHeaders,
            status: this.fakeStatusCode
        });
    };
    return TestHttpService;
}());
exports.TestHttpService = TestHttpService;
//# sourceMappingURL=test-http.service.js.map