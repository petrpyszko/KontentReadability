"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryService = void 0;
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var base_delivery_query_service_1 = require("./base-delivery-query.service");
var QueryService = /** @class */ (function (_super) {
    __extends(QueryService, _super);
    function QueryService(config, httpService, sdkInfo, mappingService) {
        var _this = _super.call(this, config, httpService, sdkInfo, mappingService) || this;
        _this.ContinuationHeaderName = 'X-Continuation';
        return _this;
    }
    /**
     * Gets single item from given url
     * @param url Url used to get single item
     * @param queryConfig Query configuration
     */
    QueryService.prototype.getSingleItem = function (url, queryConfig) {
        var _this = this;
        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {
            return _this.mappingService.viewContentItemResponse(response, queryConfig);
        }));
    };
    /**
     * Gets single feed response. Might not contain all items in your project.
     * @param url Url
     * @param queryConfig Query configuration
     */
    QueryService.prototype.getItemsFeed = function (url, queryConfig) {
        var _this = this;
        return this.getResponse(url).pipe(operators_1.map(function (response) {
            return _this.mappingService.itemsFeedResponse(response, queryConfig);
        }));
    };
    /**
     * Gets all items from feed. This method may execute multiple HTTP requests.
     * @param url Url
     * @param queryConfig Query configuration
     */
    QueryService.prototype.getItemsFeedAll = function (url, queryConfig) {
        var _this = this;
        var responses = [];
        return this.getAllItemsFeedResponses(url, {}, responses).pipe(operators_1.map(function () {
            return _this.mappingService.itemsFeedAllResponse(responses, queryConfig);
        }));
    };
    /**
     * Gets multiple items from given url
     * @param url Url used to get multiple items
     * @param queryConfig Query configuration
     */
    QueryService.prototype.getMultipleItems = function (url, queryConfig) {
        var _this = this;
        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {
            return _this.mappingService.listContentItemsResponse(response, queryConfig);
        }));
    };
    /**
     * Gets single content type from given url
     * @param url Url used to get single type
     * @param queryConfig Query configuration
     */
    QueryService.prototype.getSingleType = function (url, queryConfig) {
        var _this = this;
        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {
            return _this.mappingService.viewContentTypeResponse(response);
        }));
    };
    /**
     * Gets multiple content types from given url
     * @param url Url used to get multiple types
     * @param queryConfig Query configuration
     */
    QueryService.prototype.getMultipleTypes = function (url, queryConfig) {
        var _this = this;
        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {
            return _this.mappingService.listContentTypesResponse(response);
        }));
    };
    /**
     * Gets languages
     * @param url Url
     * @param queryConfig Query configuration
     */
    QueryService.prototype.getLanguages = function (url, queryConfig) {
        var _this = this;
        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {
            return _this.mappingService.listLanguagesResponse(response);
        }));
    };
    /**
     * Gets single taxonomy from given url
     * @param url Url used to get single taxonomy
     * @param queryConfig Query configuration
     */
    QueryService.prototype.getTaxonomy = function (url, queryConfig) {
        var _this = this;
        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {
            return _this.mappingService.viewTaxonomyGroupResponse(response);
        }));
    };
    /**
     * Gets multiple taxonomies from given url
     * @param url Url used to get multiple taxonomies
     * @param queryConfig Query configuration
     */
    QueryService.prototype.getTaxonomies = function (url, queryConfig) {
        var _this = this;
        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {
            return _this.mappingService.listTaxonomyGroupsResponse(response);
        }));
    };
    /**
     * Gets single content type element from given url
     * @param url Url used to get single content type element
     * @param queryConfig Query configuration
     */
    QueryService.prototype.getElement = function (url, queryConfig) {
        var _this = this;
        return this.getResponse(url, queryConfig).pipe(operators_1.map(function (response) {
            return _this.mappingService.viewContentTypeElementResponse(response);
        }));
    };
    QueryService.prototype.getAllItemsFeedResponses = function (url, queryConfig, responses, continuationToken) {
        var _this = this;
        var headers = [];
        if (continuationToken) {
            headers.push({
                header: this.ContinuationHeaderName,
                value: continuationToken
            });
        }
        return this.getResponse(url, queryConfig, {
            headers: headers
        }).pipe(operators_1.switchMap(function (response) {
            responses.push(response);
            var continuationHeader = response.headers.find(function (m) { return m.header.toLowerCase() === _this.ContinuationHeaderName.toLowerCase(); });
            if (continuationHeader) {
                return _this.getAllItemsFeedResponses(url, queryConfig, responses, continuationHeader.value);
            }
            return rxjs_1.of(undefined);
        }));
    };
    return QueryService;
}(base_delivery_query_service_1.BaseDeliveryQueryService));
exports.QueryService = QueryService;
//# sourceMappingURL=delivery-query.service.js.map